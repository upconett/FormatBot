from aiogram import Router
from aiogram import F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from ege.filters import *
from ege.keyboards import default
from ege.utils import formatAnswer, formatSectionList, showAhui, cheerUp, dontGiveUp
from ege.fsm import SectionFSM
import ege.database as db

router = Router()


@router.message(Command('start'))
async def commandsStart(message: Message):
	await message.answer('–†–µ—à–∞–µ–º –ï–ì–≠ –∂–æ—Å–∫–æ üëΩ', reply_markup=default())


@router.message(IndentFilter())
async def handleNewTask(message: Message):
	if not message.document:
		lines = message.text.split('\n')
		document = None
	else:
		document = message.document.file_id
		lines = message.caption.split('\n')
	taskNumber = int(lines[0])
	taskAnswer = lines[1]
	taskComment = '\n'.join(lines[2:])
	formated = formatAnswer(taskNumber, taskAnswer, taskComment)
	db.addFormattedTask(taskNumber, formated, document)
	done, tasks= db.listTasks()
	await message.answer(cheerUp())
	await message.answer(f'–ó–∞–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ ‚úÖ ({done}/{tasks})')


@router.message(F.text == 'üçß –ü–æ–º–µ–Ω—è—Ç—å —Ä–∞–∑–¥–µ–ª')
async def changeTaskSectionStart(message: Message, state: FSMContext):
	await message.answer('–ö–∞–∫–æ–π —Ç–∞–º —Ä–∞–∑–¥–µ–ª?')
	await state.set_state(SectionFSM.name)


@router.message(StateFilter(SectionFSM.name))
async def changeTaskSectionName(message: Message, state: FSMContext):
	if len(message.text.split('\n')) != 1:
		await message.answer('–í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É!')
		return
	sections = db.listSections()
	if message.text in sections:
		db.changeCurrentSection(message.text)
		await message.answer('–í—ã–±—Ä–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª ‚úÖ')
		await state.clear()
		return
	else:
		db.addSection(message.text)
		db.changeCurrentSection(message.text)
		await message.answer('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª ‚úÖ\n–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–∏–π?')
	await state.set_state(SectionFSM.number)


@router.message(StateFilter(SectionFSM.number))
async def changeTaskSectionNumber(message: Message, state: FSMContext):
	try:
		number = int(message.text)
	except:
		await message.answer('–Ø –∂–¥—É —á–∏—Å–ª–æ.')
		return
	if number > 25:
		await message.answer(showAhui())
	db.defineNumberOfTasks(number)
	await message.answer(f'–ö–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {number} ‚úÖ')
	await state.clear()


@router.message(F.text == '–†–∞–∑–¥–µ–ª—ã üç®')
async def showExistingSections(message: Message):
	sections = db.listSections()
	currentSection = db.getSection()
	formated = formatSectionList(currentSection, sections)
	await message.answer(formated)
	

@router.message(F.text == 'ü´ê –í—ã–ø–æ–ª–Ω–µ–Ω–æ')
async def listDoneTasks(message: Message):
	done, tasks = db.listTasks()
	await message.answer(dontGiveUp())
	await message.answer(f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ <b>{done}</b> –∏–∑ <b>{tasks}</b> –∑–∞–¥–∞–Ω–∏–π!')


@router.message(F.text == '–í—ã–≤–µ—Å—Ç–∏ üîÆ')
async def getDoneTasks(message: Message):
	doneTasks = db.getAllTasks()
	done, tasks = db.listTasks()
	for task in doneTasks:
		if task['document']:
			await message.answer_document(document = task['document'], caption = task['txt'])
		else:
			await message.answer(task['txt'])
	if done < tasks:
		await message.answer(f'–í—ã–ø–æ–ª–Ω–µ–Ω—ã –µ—â—ë –Ω–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! <b>({done}/{tasks})</b>')

	
